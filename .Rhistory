install.packages("caret")
install.packages("Rcpp")
q()
install.packages("Hmisc")
q()
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
data(segmentationOriginal)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages(caret)
install.packages("caret")
library(caret)
help(createDataPartition)
View(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case,p=0.7,list=false)
inTrain <- createDataPartition(y=segmentationOriginal$Case,p=0.7,list=FALSE)
View(inTrain)
View(inTrain)
set.seed(125)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
View(training)
inTrain <- createDataPartition(y=segmentationOriginal$Class,p=0.7,list=false)
inTrain <- createDataPartition(y=segmentationOriginal$Class,p=0.7,list=FALSE)
> set.seed(125)
> training <- segmentationOriginal[inTrain,]
> testing <- segmentationOriginal[-inTrain,]
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modelFit <- train(Class ~ ., method = "rpart", data = training)
install.packages("e1071")
modelFit <- train(Class ~ ., method = "rpart", data = training)
help(predict)
print(modelFit$finalModel)
testa$TotalIntenCh2=23000
View(testing)
View(testing)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
modelFit = train(Area ~ ., methods = "rpart", data=olive)
help(t)
newdata = as.data.frame(t(colMeans(olive)))
predResult <- predict(modelFit, newdata = newdata)
predResult
View(olive)
install.packages("ElemStatLearn")
help(sample)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(trainSA)
View(trainSA)
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial")
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
missClass = function(values, prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
trainPred = predict(modelFit, newdata = trainSA)
missClass(trainSA$chd, trainPred)
testPred = predict(modelFit, newdata = testSA)
missClass(testSA$chd, testPred)
clc
data(vowel.train)
data(vowel.test)
vowel.train
view(vowel.train)
review(vowel.train)
summary(vowel.train)
View(vowel.train)
set.seed(33833)
modelFit <- train(y ~ ., method = "rpart", data = vowel.train)
help(varImp)
varImp(modelFit)
q()
install.packages('quantmod')
goog <- getSymbols("GOOG", src = "yahoo")
library(quantmod)
goog <- getSymbols("GOOG", src = "yahoo")
barChart(goog, theme="white")
barChart(GOOG, theme="white")
ga_data <- read.csv("gaData.csv")
setwd("~/R/workdirec")
ga_data <- read.csv("gaData.csv")
View(ga_data)
install.packages(lubridate)
install.packages("lubridate")
library(lubridate)
training = ga_data[year(ga_date$date) < 2012,]
training = ga_data[year(ga_data$date) < 2012,]
testing = ga_data[year(ga_data$date) > 2011, ]
ts_train <- ts(training$visitsTumblr)
library(forecast)
install.libraries("forecast")
install.library("forecast")
install.packages("forecast")
ts_train
summary(ts_train)
help(bats)
library(forecast)
?bats
fit <- bats(ts_train)
fits
fit
?forecast
forec <- forecast(fit)
forec
View(ga_data)
forec <- forecast(fit, h = 235)
forec$lower
forec$level
forec$lower[,2]
in_true_forec <- (testing$visitsTumblr > forec$lower[, 2]) & (testing$visitsTumblr < forec$upper[, 2])
len(in_true_forec)
length(in_true_forec)
length(in_true_forec == True)
length(in_true_forec == TRUE)
true_forec = test$visitsTumblr[in_true_forec]
true_forec = testing$visitsTumblr[in_true_forec]
226 / 235
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
model_fit <- train(CompressiveStrength ~ ., data = training, method = "svm")
library(e1071)
?e1071
??e1071
library(e1071)
model_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(model_svm, testing)
rmse(pred_svm, testing$CompressiveStrength)
rmse <- function(x, y){sqrt(mean((x - y) ^ 2))}
rmse(pred_svm, testing$CompressiveStrength)
q()
0.75 * 0.3 / (0.3 * 0.75 + 0/48 * 0.7)
0.75 * 0.3 / (0.3 * 0.75 + 0.48 * 0.7)
q()
?plot
summary(aver.steps.per.interval)
raw.data <- read.csv("activity.csv")
summary(raw.data)
setwd("C:/Daniel/library/coursera/data_science/reproducible_research/work/assignment_1/repo/RepData_PeerAssessment1")
raw.data <- read.csv("activity.csv")
summary(raw.data)
total.steps.per.day <-
tapply(raw.data$steps, raw.data$date, sum, na.rm = TRUE)
hist(total.steps.per.day)
aver.steps.per.interval <-
tapply(raw.data$steps, raw.data$interval, mean, na.rm = TRUE)
summary(aver.steps.per.interval)
str(aver.steps.per.interval)
?unique
plot(unique(raw.data$interval), aver.steps.per.interval, type = "l")
raw.data$interval[whic.max(aver.steps.per.interval)]
raw.data$interval[which.max(aver.steps.per.interval)]
?complete.cases
?length
length(raw.data)
str(raw.data)
dim(raw.data)
dim(complete.cases(raw.data))
length(complete.cases(raw.data))
complete.cases(raw.data)
?is.na
is.na(raw.data)
length(raw.data$steps[steps.missing])
steps.missing <- is.na(raw.data$steps);
length(raw.data$steps[steps.missing])
?as.char
?as
as.character
raw.data$interval[which.max(aver.steps.per.interval)]
aver.steps.per.interval[as.character(835)]
max(aver.steps.per.interval)
help which
?which
missing.steps
steps.missing
which(steps.missing)
filled.data <- raw.data
function (row.index) aver.steps.per.interval[as.character(raw.data$interval[row.index])])
filled.data$[steps.missing] <- lapply(which(steps.missing),
function (row.index) aver.steps.per.interval[as.character(raw.data$interval[row.index])])
filled.data$[steps.missing] <- lapply(which(steps.missing),
function(row.index) aver.steps.per.interval[as.character(raw.data$interval[row.index])])
as.character
aver.steps.per.interval[as.character(raw.data$interval[1])]
?function
filled.data$[steps.missing] <- lapply(which(steps.missing),
function(row.index, orig.data, fill.data)
fill.data[as.character(orig.data$interval[row.index])],
raw.data, aver.steps.per.interval)
filled.data$[steps.missing] <- lapply(which(steps.missing),
function(row.index, orig.data, fill.data)
fill.data[as.character(orig.data$interval[row.index])], raw.data, aver.steps.per.interval)
filled.data$[steps.missing] <- lapply(which(steps.missing),
(function(row.index, orig.data, fill.data)
fill.data[as.character(orig.data$interval[row.index])]),
raw.data, aver.steps.per.interval)
filled.data <- raw.data
func.fill.data <- function(row.index, orig.data, fill.data)
{
fill.data[as.character(orig.data$interval[row.index])]
}
filled.data$[steps.missing] <- lapply(which(steps.missing),
func.fill.data, raw.data, aver.steps.per.interval)
?lapply
filled.data <- raw.data
func.fill.data <- function(row.index, orig.data, data.to.fill)
{
data.to.fill[as.character(orig.data$interval[row.index])]
}
filled.data$[steps.missing] <- lapply(which(steps.missing),
func.fill.data, orig.data = raw.data, data.to.fill = aver.steps.per.interval)
filled.data <- raw.data
func.fill.data <- function(row.index, orig.data, data.to.fill)
{
data.to.fill[as.character(orig.data$interval[row.index])]
}
filled.data$steps[steps.missing] <- lapply(which(steps.missing),
func.fill.data, orig.data = raw.data, data.to.fill = aver.steps.per.interval)
total.steps.per.day.filled <-
tapply(filled.data$steps, filled.data$date, sum, na.rm = TRUE)
hist(total.steps.per.day.filled)
str(filled.data)
filled.data$steps[steps.missing] <- lapply(which(steps.missing),
func.fill.data, orig.data = raw.data, data.to.fill = aver.steps.per.interval,
simplify = TRUE)
simplified = TRUE)
filled.data$steps[steps.missing] <- lapply(which(steps.missing),
func.fill.data, orig.data = raw.data, data.to.fill = aver.steps.per.interval,
simplified = TRUE)
?lapply
filled.data <- raw.data
func.fill.data <- function(row.index, orig.data, data.to.fill)
{
data.to.fill[as.character(orig.data$interval[row.index])]
}
filled.data$steps[steps.missing] <- lapply(which(steps.missing),
func.fill.data, orig.data = raw.data, data.to.fill = aver.steps.per.interval,
simplify = TRUE)
filled.data <- raw.data
func.fill.data <- function(row.index, orig.data, data.to.fill)
{
data.to.fill[as.character(orig.data$interval[row.index])]
}
filled.data$steps[steps.missing] <- lapply(which(steps.missing),
func.fill.data, orig.data = raw.data, data.to.fill = aver.steps.per.interval,
simplify = "array")
filled.data <- raw.data
func.fill.data <- function(row.index, orig.data, data.to.fill)
{
data.to.fill[as.character(orig.data$interval[row.index])]
}
filled.data$steps[steps.missing] <- lapply(X = which(steps.missing),
FUN = func.fill.data, orig.data = raw.data, data.to.fill = aver.steps.per.interval,
simplify = "array")
lapply(X = which(steps.missing),
FUN = func.fill.data, orig.data = raw.data, data.to.fill = aver.steps.per.interval)
str(raw.data)
str(filled.data)
filled.data <- raw.data
func.fill.data <- function(row.index, orig.data, data.to.fill)
{
data.to.fill[as.character(orig.data$interval[row.index])]
}
filled.data$steps[steps.missing] <- lapply(X = which(steps.missing),
FUN = func.fill.data, orig.data = raw.data, data.to.fill = aver.steps.per.interval)
str(filled.data)
temp = c(1 2 3)
temp = c(1, 2, 3)
temp[c(2,3)] = c(4, 5)
temp
temp[c(FALSE, TRUE, TRUE)] = c(4,5)
temp
temp[c(FALSE, TRUE, TRUE)] = c(5,6)
temp
temp = c(5,6)
str(temp)
temp2 = lapply(X = which(steps.missing),
FUN = func.fill.data, orig.data = raw.data, data.to.fill = aver.steps.per.interval)
str(temp2)
rawData <- read.csv("activity.csv")
summary(rawData)
totalStepsPerDay <-
tapply(rawData$steps, rawData$date, sum, na.rm = TRUE)
averStepsPerInterval <-
tapply(rawData$steps, rawData$interval, mean, na.rm = TRUE)
stepsMissing <- is.na(rawData$steps)
length(rawData$steps[stepsMissing])
stepsMissing <- is.na(rawData$steps)
length(rawData$steps[stepsMissing])
imputedData <- rawData
impute.data <- function(rowIndex, origData, dataToFill)
{
dataToFill[as.character(origData$interval[rowIndex])]
}
imputedData$steps[stepsMissing] <- lapply(X = which(stepsMissing),
FUN = impute.data, origData = rawData, dataToFill = averStepsPerInterval, simplified = "array")
imputedData <- rawData
impute.data <- function(rowIndex, origData, dataToFill)
{
dataToFill[as.character(origData$interval[rowIndex])]
}
imputedData$steps[stepsMissing] <- lapply(X = which(stepsMissing),
FUN = impute.data, origData = rawData, dataToFill = averStepsPerInterval, simplify = "array")
?null
?NULL
imputedData <- rawData
impute.data <- function(rowIndex, origData = NULL, dataToFill = NULL)
{
dataToFill[as.character(origData$interval[rowIndex])]
}
imputedData$steps[stepsMissing] <- lapply(X = which(stepsMissing),
FUN = impute.data, origData = rawData, dataToFill = averStepsPerInterval, simplify = "array")
imputedData <- rawData
imputeMissingSteps <- function(rowIndex)
{
averStepsPerInterval[as.character(rawData[rowIndex])]
}
imputedData$steps[stepsMissing] <- lapply(X = which(stepsMissing),
FUN = imputeMissingSteps, simplify = "array")
imputedData <- rawData
imputeMissingSteps <- function(rowIndex)
{
averStepsPerInterval[as.character(rawData[rowIndex])]
}
imputedData$steps[stepsMissing] <- lapply(X = which(stepsMissing),
FUN = imputeMissingSteps)
imputedData <- rawData
imputeMissingSteps <- function(rowIndex)
{
averStepsPerInterval[as.character(rawData$interval[rowIndex])]
}
imputedData$steps[stepsMissing] <- lapply(X = which(stepsMissing),
FUN = imputeMissingSteps)
which(stepsMissing)
str(which(stepsMissing))
imputedData <- rawData
imputeMissingSteps <- function(rowIndex)
{
averStepsPerInterval[as.character(rawData$interval[[rowIndex]])]
}
imputedData$steps[stepsMissing] <- sapply(X = which(stepsMissing),
FUN = imputeMissingSteps)
imputedTotalStepsPerDay <-
tapply(imputedData$steps, imputedData$date, sum, na.rm = TRUE)
hist(imputedTotalStepsPerDay)
hist(totalStepsPerDay)
imputedTotalStepsPerDay
totalStepsPerDay
mean(imputedTotalStepsPerDay)
median(imputedTotalStepsPerDay)
mean(totalStepsPerDay)
?weekdays
raw_data <- read.csv("activity.csv")
summary(raw_data)
total_steps_per_day <-
tapply(raw_data$steps, raw_data$date, sum, na.rm = TRUE)
hist(total_steps_per_day)
weekdays(imputed_data$date)
plot(unique(raw_data$interval), aver_steps_per_interval, type = "l")
raw_data <- read.csv("activity.csv")
summary(raw_data)
total_steps_per_day <-
tapply(raw_data$steps, raw_data$date, sum, na.rm = TRUE)
hist(total_steps_per_day)
```
total_steps_per_day <-
tapply(raw_data$steps, raw_data$date, sum, na.rm = TRUE)
hist(total_steps_per_day)
ver_steps_per_interval <-
tapply(raw_data$steps, raw_data$interval, mean, na.rm = TRUE)
steps_missing <- is.na(raw_data$steps)
length(raw_data$steps[steps_missing])
imputed_data <- raw_data
impute_missing_steps <- function(row_index)
{
aver_steps_per_interval[as.character(raw_data$interval[[row_index]])]
}
imputed_data$steps[steps_missing] <- sapply(X = which(steps_missing),
FUN = impute_missing_steps)
total_steps_per_day_imputed <-
tapply(imputed_data$steps, imputed_data$date, sum, na.rm = TRUE)
hist(total_steps_per_day_imputed)
mean(total_steps_per_day_imputed)
median(total_steps_per_day_imputed)
weekdays(imputed_data$date)
imputed.data$date
imputed_data$date
imputed_data$date[1]
imputed_data$date[2]
weekdays(imputed_date$date[1])
weekdays(imputed_data$date[1])
?as.date
as.Date(imputed_data$date[1])
weekdays(as.Date(imputed_data$date[1]))
weekdays(as.Date(imputed_data$date))
weekdays(as.Date(imputed_data$date)) %in% c("Saturday, Sunday")
?weekdays
weekdays(as.Date(imputed_data$date), abbreviate = FALSE) %in% c("Saturday, Sunday")
weekdays(as.Date(imputed_data$date), abbreviate = FALSE)
weekdays(as.Date(imputed_data$date), abbreviate = TRUE)
Sys.setlocale("LC_TIME", "English")
weekdays(as.Date(imputed_data$date), abbreviate = TRUE)
weekdays(as.Date(imputed_data$date), abbreviate = FALSE) %in% c("Saturday, Sunday")
weekdays(as.Date(imputed_data$date)
)
!(weekdays(as.Date(imputed_data$date), abbreviate = FALSE) %in% c("Saturday, Sunday"))
?plot
is_weekend <-
weekdays(as.Date(imputed_data$date)) %in% c("Saturday, Sunday")
aver_steps_per_interval_weekends <-
tapply(raw_data$steps[is_weekend], raw_data$interval, mean, na.rm = TRUE)
aver_steps_per_interval_weekdays <-
tapply(raw_data$steps[!is_weekend], raw_data$interval, mean, na.rm = TRUE)
par(mfrow=c(2,1))
plot(unique(raw_data$interval), aver_steps_per_interval_weekends)
plot(unique(raw_data$interval), aver_steps_per_interval_weekdays)
is_weekend <-
weekdays(as.Date(imputed_data$date)) %in% c("Saturday, Sunday")
aver_steps_per_interval_weekends <-
tapply(raw_data$steps[is_weekend], raw_data$interval[is_weekend], mean, na.rm = TRUE)
aver_steps_per_interval_weekdays <-
tapply(raw_data$steps[!is_weekend], raw_data$interval[!is_weekend], mean, na.rm = TRUE)
par(mfrow=c(2,1))
plot(unique(raw_data$interval), aver_steps_per_interval_weekends)
plot(unique(raw_data$interval), aver_steps_per_interval_weekdays)
!is_weekend
is_weekend
!is_weekend
aver_steps_per_interval_weekdays <-
tapply(raw_data$steps[!is_weekend], raw_data$interval[!is_weekend], mean, na.rm = TRUE)
aver_steps_per_interval_weekdays
is_weekend <-
weekdays(as.Date(imputed_data$date)) %in% c("Saturday, Sunday")
aver_steps_per_interval_weekends <-
tapply(raw_data$steps[is_weekend], raw_data$interval[is_weekend], mean, na.rm = TRUE)
aver_steps_per_interval_weekdays <-
tapply(raw_data$steps[!is_weekend], raw_data$interval[!is_weekend], mean, na.rm = TRUE)
par(mfrow=c(2,1))
plot(unique(raw_data$interval[is_weekend]), aver_steps_per_interval_weekends)
plot(unique(raw_data$interval[!is_weekend]), aver_steps_per_interval_weekdays)
raw_data$interval[is_weekend]
raw_data$interval
is_weekend
is_weekend <-
weekdays(as.Date(imputed_data$date)) %in% c("Saturday, Sunday")
```{r}
is_weekend <-
(weekdays(as.Date(imputed_data$date)) %in% c("Saturday", "Sunday"))
aver_steps_per_interval_weekends <-
tapply(raw_data$steps[is_weekend], raw_data$interval[is_weekend], mean, na.rm = TRUE)
aver_steps_per_interval_weekdays <-
tapply(raw_data$steps[!is_weekend], raw_data$interval[!is_weekend], mean, na.rm = TRUE)
par(mfrow=c(2,1))
plot(unique(raw_data$interval[is_weekend]), aver_steps_per_interval_weekends)
plot(unique(raw_data$interval[!is_weekend]), aver_steps_per_interval_weekdays)
par(mfrow=c(2,1))
plot(unique(raw_data$interval[is_weekend]), aver_steps_per_interval_weekends, type = "l")
plot(unique(raw_data$interval[!is_weekend]), aver_steps_per_interval_weekdays, type = "l")
